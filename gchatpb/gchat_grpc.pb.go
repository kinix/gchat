// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gchatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GChatClient is the client API for GChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GChatClient interface {
	ReceiveAndSend(ctx context.Context, opts ...grpc.CallOption) (GChat_ReceiveAndSendClient, error)
}

type gChatClient struct {
	cc grpc.ClientConnInterface
}

func NewGChatClient(cc grpc.ClientConnInterface) GChatClient {
	return &gChatClient{cc}
}

func (c *gChatClient) ReceiveAndSend(ctx context.Context, opts ...grpc.CallOption) (GChat_ReceiveAndSendClient, error) {
	stream, err := c.cc.NewStream(ctx, &GChat_ServiceDesc.Streams[0], "/gchatpb.GChat/ReceiveAndSend", opts...)
	if err != nil {
		return nil, err
	}
	x := &gChatReceiveAndSendClient{stream}
	return x, nil
}

type GChat_ReceiveAndSendClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type gChatReceiveAndSendClient struct {
	grpc.ClientStream
}

func (x *gChatReceiveAndSendClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gChatReceiveAndSendClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GChatServer is the server API for GChat service.
// All implementations must embed UnimplementedGChatServer
// for forward compatibility
type GChatServer interface {
	ReceiveAndSend(GChat_ReceiveAndSendServer) error
	mustEmbedUnimplementedGChatServer()
}

// UnimplementedGChatServer must be embedded to have forward compatible implementations.
type UnimplementedGChatServer struct {
}

func (UnimplementedGChatServer) ReceiveAndSend(GChat_ReceiveAndSendServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveAndSend not implemented")
}
func (UnimplementedGChatServer) mustEmbedUnimplementedGChatServer() {}

// UnsafeGChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GChatServer will
// result in compilation errors.
type UnsafeGChatServer interface {
	mustEmbedUnimplementedGChatServer()
}

func RegisterGChatServer(s grpc.ServiceRegistrar, srv GChatServer) {
	s.RegisterService(&GChat_ServiceDesc, srv)
}

func _GChat_ReceiveAndSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GChatServer).ReceiveAndSend(&gChatReceiveAndSendServer{stream})
}

type GChat_ReceiveAndSendServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type gChatReceiveAndSendServer struct {
	grpc.ServerStream
}

func (x *gChatReceiveAndSendServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gChatReceiveAndSendServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GChat_ServiceDesc is the grpc.ServiceDesc for GChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gchatpb.GChat",
	HandlerType: (*GChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveAndSend",
			Handler:       _GChat_ReceiveAndSend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gchatpb/gchat.proto",
}
